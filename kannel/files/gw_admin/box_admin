#!/bin/bash

temp_cwd=$(dirname $BASH_SOURCE)
[[ $temp_cwd = '.' ]] && gw_admin_root=$(pwd) || {
		[[ $temp_cwd =~ '^\.' ]] && \
			gw_admin_root=$(pwd)/$(sed 's:^\./::' <<< $temp_cwd) || \
			gw_admin_root=$temp_cwd
	}
unset -v temp_cwd

. $gw_admin_root/gw_vars
# Sanity Check(s)

# -----< Begin sanity checks. >----- #

# Sanity Check TODOS:
#   - Is Kannel Installed?
#       * What OS is this
#       * Check for availability of Kannel's requisite packages ( hereinafter
#         referred to as packages ) from OS distro's package manager.
#       * If packages could not be installed; alert user and exit gracefully.
#       * If packages were installed proceed with kannel installation.
#           - create tmp staging area where the source is downloaded.
#           - compile the source with agreed upon defaults and install.
#       * If everything succeeds kannel is installed. return success

#   Is the GW where we expect it to be?
check_bindir() {
    [ -d $BINDIR ] || {
	echo Gateway directory supplied [ $BINDIR ] does not exist. >&2
	return 2
    }
}

#   Are the GW apps there?
check_gw_apps() {
    for app in $START_STOP_DAEMON $BBOX $SMSBOX $SQLBOX $SMPPBOX; do
	[ -x $BINDIR/$app ] || {
            echo -n $app not found. >&2
            [[ $app == $BBOX ]] && {
		echo ' ' $app MUST be present. Exiting. >&2
		return 3
            }
            [[ $app == $SMSBOX ]] && {
		echo ' ' $app MUST be present. Exiting. >&2
		return 3
            }
            echo
	}
    done
}

#   Is GW config available?
check_gw_conf() {
    [ -r $GW_CONF ] || {
	echo Gateway Config NOT found. Exiting. >&2
	return 4
    }
}

# -----< End of sanity checks. >----- #

# Prep GW User
grep -q $GW_USER /etc/passwd
[ $? -ne 0 ] && {
    useradd -r $GW_USER 2>/dev/null
    [ $? -ne 0 ] && {
        echo Need permissions to add a user. >&2
        return 5
    }
}

# Prep Log Folder
[ ! -d $LOGDIR ] && {
    mkdir -p $LOGDIR
    chown $GW_USER $LOGDIR 2>/dev/null
    [ $? -ne 0 ] && {
        echo Need permissions to change ${LOGDIR}\'s owner. >&2
        return 5
    }
}

# Prep PID dir
[ -d $RUNDIR ] || {
    mkdir -p $RUNDIR
    chown $GW_USER $RUNDIR 2>/dev/null
    [ $? -ne 0 ] && {
        echo Need permissions to change ${RUNDIR}\'s owner. >&2
        return 5
    }
}

# start-stop-daemon doc / usage
# start-stop-daemon for Debian GNU/Linux - small and fast C version written by
# Marek Michalkiewicz <marekm@i17linuxb.ists.pwr.wroc.pl>, public domain.
# svn-r5240M

# Usage:
#   start-stop-daemon -S|--start options ... -- arguments ...
#   start-stop-daemon -K|--stop options ...
#   start-stop-daemon -H|--help
#   start-stop-daemon -V|--version

# Options (at least one of --exec|--pidfile|--user is required):
#   -x|--exec <executable>        program to start/check if it is running
#   -p|--pidfile <pid-file>       pid file to check
#   -c|--chuid <name|uid[:group|gid]>
#   		change to this user/group before starting process
#   -u|--user <username>|<uid>    stop processes owned by this user
#   -n|--name <process-name>      stop processes with this name
#   -s|--signal <signal>          signal to send (default TERM)
#   -a|--startas <pathname>       program to start (default is <executable>)
#   -b|--background               force the process to detach
#   -m|--make-pidfile             create the pidfile before starting
#   -t|--test                     test mode, don't do anything
#   -o|--oknodo                   exit status 0 (not 1) if nothing done
#   -q|--quiet                    be more quiet
#   -v|--verbose                  be more verbose

# Exit status:  0 = done  1 = nothing done (=> 0 if --oknodo)  2 = trouble

# Start Box
box_start()
{
    local box= exe= suffix= PIDFILE=
    box=$(box_args "$@")
    box_valid $box || return
    exe=$(box_exec "$@")
    [[ -z $exe ]] && return 2
    if [[ $box =~ ${box_regexes[aux_box]} ]]
    then
	eval bbox_check_port $exe || return
        suffix=$(awk -F/ '{print $NF}' <<< "$exe" |\
		     sed -e 's/\..*//' \
			 -e 's/'$box'//' \
			 -e 's/^[^a-zA-Z]*//'
	      )
    elif [[ $box =~ ${box_regexes[smsbox]} ]]
    then
	eval bbox_check_port $exe || return
    else
	:
    fi
    PIDFILE=$RUNDIR/$box.pid
    [[ -n $suffix ]] && PIDFILE=$(sed 's/\(\.pid\)/_'$suffix'\1/' \
				      <<< "$PIDFILE")
    eval $BINDIR/$START_STOP_DAEMON \
         --start \
         --quiet \
         --chuid $GW_USER \
         --pidfile $PIDFILE \
         --exec \
            $BINDIR/$RUN_BOX -- \
              --pidfile $PIDFILE \
              --min-delay $RUN_BOX_MIN_DELAY \
              $(awk '{print $1}' <<< $exe) -- \
              $(awk '{print $2}' <<< $exe)
    [ $? -eq 0 ] && echo $PIDFILE
}

# Start Box with parachute.
box_start_parachute()
{
    local box= exe= suffix= rbox=
    local options=
    box=$(box_args "$@")
    box_valid $box || return
    exe=$(box_exec "$@")
    [[ -z $exe ]] && return 2
    pid_prefix=${box}
    if [[ $box =~ ${box_regexes[aux_box]} ]]
    then
	eval bbox_check_port $exe || return
        suffix=$(awk -F/ '{print $NF}' <<< "$exe" |\
		     sed -e 's/\..*//' \
			 -e 's/'$box'//' \
			 -e 's/^[^a-zA-Z]*//'
	      )
    elif [[ $box =~ ${box_regexes[smsbox]} ]]
    then
		eval bbox_check_port $exe || return
    else
		:
    fi
    [[ -n $suffix ]] && pid_prefix=$(sed 's/$/_'$suffix'/' \
				      <<< "$box")
    # Apparently the box won't play nice if you try to 
    # clobber a pid file, so attempt to stop the box then
    # proceed to remove the pid file.
    [ -f $RUNDIR/${pid_prefix}.pid ] &&  {
        eval kill -KILL $(cat $RUNDIR/${pid_prefix}.pid)
        __remove_pid_file $pid_prefix
    }
    options=${BOX_OPTIONS}/${pid_prefix}.pid
    [[ $box =~ ${box_regexes[bbox]} ]] && \
    	options="$options --panic-script $PANIC_SCRIPT"
    eval $(awk '{print $1}' <<< "$exe") $options -- \
		 $(awk '{print $2}' <<< "$exe")
}

# Stop Box
box_stop()
{
    local PIDFILE= suffix= save_ifs= box= exe= instance=
    save_ifs=$IFS
    box=$(box_args "$@")
    box_valid $box || return $?
    exe=$(box_exec_get "$box")
    [[ -z $exe ]] && return 2
    # for ((i=$(wc -l <<< "$exe"); i>0; i--)) do
    IFS=$'\n'
    PIDFILE=$RUNDIR/$box.pid
    if [[ $(wc -l <<< "$exe") -gt 1 ]]
    then
        select instance in $exe
        do
            # instance=$(sed -n ${i}p <<< "$exe")
            suffix=$(awk -F/ '{print $NF}' \
                         <<< $instance |\
                         sed -e 's/\..*//' \
                             -e "s/$box//" \
                             -e 's/^[^a-zA-Z]*//' \
                             -e 's/\n//'
                  )
            break
        done
    else
        instance=$exe
        [[ $box =~ ${box_regexes[aux_box]} ]] && \
            suffix=$(awk -F/ '{print $NF}' \
                         <<< "$exe" |\
                         sed -e 's/\..*//' \
			     -e 's/'$box'//' \
                             -e 's/^[^a-zA-Z]*//'
                  )
    fi
    [[ -n $suffix ]] && PIDFILE=$(sed 's/\(\.pid\)/_'$suffix'\1/' \
				      <<< "$PIDFILE"
                               )
    # --exec $instance \
    eval $BINDIR/$START_STOP_DAEMON \
         --stop \
         --pid $PIDFILE
    IFS="$save_ifs"
}

# Stop Box with parachute
box_stop_parachute()
{
    local PIDFILE= suffix= save_ifs= box= exe= instance=
    save_ifs=$IFS
    box=$(box_args "$@")
    box_valid $box || return $?
    exe=$(box_exec_get_parachute "$box")
    [[ -z $exe ]] && return 2
    # for ((i=$(wc -l <<< "$exe"); i>0; i--)) do
    IFS=$'\n'
    PIDFILE=$RUNDIR/${box}.pid
    if [[ $(wc -l <<< "$exe") -gt 1 ]]
    then
        select instance in $exe
        do
            # instance=$(sed -n ${i}p <<< "$exe")
            suffix=$(awk -F/ '{print $NF}' \
                         <<< $instance |\
                         sed -e 's/\..*//' \
                             -e "s/$box//" \
                             -e 's/^[^a-zA-Z]*//' \
                             -e 's/\n//'
                  )
            break
        done
    else
        instance=$exe
        [[ $box =~ ${box_regexes[aux_box]} ]] && \
            suffix=$(awk -F/ '{print $NF}' \
                         <<< "$exe" |\
                         sed -e 's/\..*//' \
                             -e 's/'$box'//' \
                             -e 's/^[^a-zA-Z]*//'
                  )
    fi
    if [[ -n $suffix ]]
    then
        PIDFILE=$(sed 's/\(\.pid\)/_'$suffix'\1/' <<< "$PIDFILE")
    else
        # If you can't find a "suffixless" file
        # try adding an _main suffix.
        [[ $(command ls -d $PIDFILE 2>/dev/null) =~ ^\ *$ ]] && \
            PIDFILE=$(sed 's/\(\.pid\)/_main\1/' <<< "$PIDFILE")
    fi
    [[ -r $PIDFILE ]] || {
        echo PID File not found. You shall have to stop the box manually \
             the good old fashioned way with \
             "ps -ef | grep ([b]ox_of_choice) | awk '$3==1", YMMV, \
             and kill the thing. >&2
        return 2
    }
    # --exec $instance \
    # eval $BINDIR/$START_STOP_DAEMON \
    #      --stop \
    #      --pid $PIDFILE
    kill $(cat $PIDFILE | xargs)
    IFS="$save_ifs"
}

# Stop All Boxes
box_stop_all()
{
    local PIDFILE= suffix= save_ifs= box= exe= instance=
    save_ifs=$IFS
    box=$(box_args "$@")
    box_valid $box || return $?
    exe=$(box_exec_get "$box")
    [[ -z $exe ]] && return 2
    IFS=$'\n'
    PIDFILE=$RUNDIR/$box.pid
    # for ((i=$(wc -l <<< "$exe"); i>0; i--)) do
    for instance in $exe
    do
        [[ $box =~ ${box_regexes[aux_box]} ]] && \
            suffix=$(awk -F/ '{print $NF}' \
                         <<< $instance |\
                         sed -e 's/\..*//' \
                             -e "s/$box//" \
                             -e 's/^[^a-zA-Z]*//' \
                             -e 's/\n//'
                  )
        [[ -n $suffix ]] && \
            PIDFILE=$(sed 's/\(\.pid\)/_'$suffix'\1/' <<< "$PIDFILE")
        eval $BINDIR/$START_STOP_DAEMON \
             --stop \
             --pid $PIDFILE
    done
    IFS="$save_ifs"
}

# Get Box Arg
box_args()
{
    [ $# -ne 1 ] && {
        [ $# -lt 1 ] && {
            echo I expect to be furnished with a box app. >&2
            return 2
        }
        # TODO: Some color would go a long way in making this a bit tidy
        # and easier on the eye.
        echo WARNING: Extra arguments shall be discarded. >&2
    }
    echo $1
}

# Validate Box Arg
box_valid()
{
    local valid_box='\<(bearer|sms|sql|(open)?smpp)box\>'
    [[ ! $1 =~ $valid_box ]] && {
        echo Box provided is not valid. >&2
        return 2
    }
    return 0
}

# Return Exec str
box_exec()
{
    [ $# -ge 1 ] && [ $# -le 2 ] || {
        echo I only expect 1 or 2 args. >&2
        return 2
    }
    [[ $1 =~ ${box_regexes[main_box]} ]] && {
        echo "$BINDIR/$1 $GW_CONF"
        return
    }
    [[ $1 =~ ${box_regexes[aux_box]} ]] && \
        [[ $# -eq 2 ]] && {
          [[ $1 =~ ^smpp ]] && {
            echo "$BINDIR/open$1 $2"
            return
          } || {
            echo "$BINDIR/$1 $2"
            return
          }
        }
    [ $? -ne 0 ] && {
        echo You need to provide a path for $1\'s config file >&2
        return 2
    }
}

# Return Exec str of running box
box_exec_get()
{
    # What instances of the arg box are running
    rbox=$(ps aux | grep $1 | grep -v grep | awk '/run_kannel_box /{print $(NF-2), $NF}')
    [[ -n $rbox ]] && echo "$rbox" || {
            echo No Running Boxes were found. >&2
            return 2
	}
}

# Return box & config path of queried box.
box_exec_get_parachute()
{
    # What instances of the arg box are running
    rbox=$(ps aux | \
              grep $1 | \
              grep -v grep | \
              sed 's/[^/]*//' | \
              awk '/box /{print $1, $NF}' | \
              sort -u
          )
    [[ -n $rbox ]] && echo "$rbox" || {
            echo No Running Boxes were found. >&2
            return 2
	}
}

bbox_check_port()
{
    local port=
    grep -q smsbox$ <<< $1
    if [ $? -eq 0 ]
    then
        # use value of smsbox-port as port
	port=$(grep smsbox-port ${GW_CONF%/*}/core.conf |\
		   awk '{print $NF}')
    else
        # use value of bearerbox-port as port
	port=$(grep bearerbox-port "$2" | awk '{print $NF}')
    fi
    [[ -z $port ]] || [[ ! $port =~ ^[[:digit:]]*$ ]] && {
        echo Can\'t determine bearerbox-port for \""$@"\" >&2
        return 6
    }
    nc -z $LHOST $port
    [ $? -ne 0 ] && {
        echo Port Check failed. Port $port has to be open to \
             start this box. >&2
        return 6
    }
    return 0
}

# Send signal to (b)box parachute edition.
box_send_signal_parachute()
{
    local PIDFILE= suffix= save_ifs= box= exe= instance= sig=
    save_ifs=$IFS
    sig=$(signal_passed "$@")
    signal_valid $sig || return $?
    box=$(box_args "$@")
    box_valid $box || return $?
    exe=$(box_exec_get_parachute "$box")
    [[ -z $exe ]] && return 2
    # for ((i=$(wc -l <<< "$exe"); i>0; i--)) do
    IFS=$'\n'
    PIDFILE=$RUNDIR/$box.pid
    if [[ $(wc -l <<< "$exe") -gt 1 ]]; then
        select instance in $exe; do
            # instance=$(sed -n ${i}p <<< "$exe")
            suffix=$(awk -F/ '{print $NF}' \
                         <<< $instance |\
                         sed -e 's/\..*//' \
                             -e "s/$box//" \
                             -e 's/^[^a-zA-Z]*//' \
                             -e 's/\n//'
                  )
            break
        done
    else
        instance=$exe
        [[ $box =~ ${box_regexes[aux_box]} ]] && \
            suffix=$(awk -F/ '{print $NF}' \
                         <<< "$exe" |\
                         sed -e 's/\..*//' \
                             -e 's/'$box'//' \
                             -e 's/^[^a-zA-Z]*//'
                  )
    fi
    if [[ -n $suffix ]]
    then
        PIDFILE=$(sed 's/\(\.pid\)/_'$suffix'\1/' <<< "$PIDFILE")
    else
        [[ $(ls -d $PIDFILE 2>/dev/null) =~ ^\ *$ ]] && \
            PIDFILE=$(sed 's/\(\.pid\)/_main\1/' <<< "$PIDFILE")
    fi
    [[ -r $PIDFILE ]] || {
        echo PID File not found. You shall have to do it manually, \
             the good old fashioned way with \
             "ps -ef | grep ([b]ox_of_choice) | awk '$3==1", YMMV,\
             and send the signal to the thing. >&2
        return 2
    }
    # eval $BINDIR/$START_STOP_DAEMON \
    #      --stop \
    #      --signal $sig \
    #      --exec $instance \
    #      --pid $PIDFILE
    kill -$sig $(cat $PIDFILE | xargs)
    IFS="$save_ifs"
}

# Send signal to (b)box
box_send_signal()
{
    local PIDFILE= suffix= save_ifs= box= exe= instance= sig=
    save_ifs=$IFS
    sig=$(signal_passed "$@")
    signal_valid $sig || return $?
    box=$(box_args "$@")
    box_valid $box || return $?
    exe=$(box_exec_get "$box")
    [[ -z $exe ]] && return 2
    # for ((i=$(wc -l <<< "$exe"); i>0; i--)) do
    IFS=$'\n'
    PIDFILE=$RUNDIR/$box.pid
    if [[ $(wc -l <<< "$exe") -gt 1 ]]; then
        select instance in $exe; do
            suffix=$(awk -F/ '{print $NF}' \
                         <<< $instance |\
                         sed -e 's/\..*//' \
							 -e "s/$box//" \
                             -e 's/^[^a-zA-Z]*//' \
                             -e 's/\n//'
                  )
            break
        done
    else
        instance=$exe
        [[ $box =~ ${box_regexes[aux_box]} ]] && \
            suffix=$(awk -F/ '{print $NF}' \
                         <<< "$exe" |\
                         sed -e 's/\..*//' \
			     -e 's/'$box'//' \
                             -e 's/^[^a-zA-Z]*//'
                  )
    fi
    [[ -n $suffix ]] && PIDFILE=$(sed 's/\(\.pid\)/_'$suffix'\1/' \
				      <<< "$PIDFILE")
    eval $BINDIR/$START_STOP_DAEMON \
         --stop \
         --signal $sig \
         --pid $PIDFILE
    IFS="$save_ifs"
}

# Send signal to (b)box
box_send_signal_all()
{
    local PIDFILE= suffix= save_ifs= box= exe= instance= sig=
    save_ifs=$IFS
    sig=$(signal_passed "$@")
    signal_valid $sig || return $?
    box=$(box_args "$@")
    box_valid $box || return $?
    exe=$(box_exec_get "$box")
    [[ -z $exe ]] && return 2
    # for ((i=$(wc -l <<< "$exe"); i>0; i--)) do
    IFS=$'\n'
    PIDFILE=$RUNDIR/$box.pid
    for instance in $exe
    do
        [[ $box =~ ${box_regexes[aux_box]} ]] && \
            suffix=$(awk -F/ '{print $NF}' \
                         <<< $instance |\
                         sed -e 's/\..*//' \
                             -e "s/$box//" \
                             -e 's/^[^a-zA-Z]*//' \
                             -e 's/\n//'
                  )
        [[ -n $suffix ]] && \
            PIDFILE=$(sed 's/\(\.pid\)/_'$suffix'\1/' <<< "$PIDFILE")
		eval $BINDIR/$START_STOP_DAEMON \
			 --stop \
			 --signal $sig \
			 --pid $PIDFILE
    done
	# --exec $instance \
    IFS="$save_ifs"
}

# Return signal passed as argument
signal_passed()
{
    [ $# -ne 2 ] && {
        [ $# -lt 2 ] && {
            echo I expect to be furnished with a box app and a signal. >&2
            return 2
        }
        # TODO: Some color would go a long way in making this a bit tidy
        # and easier on the eye.
        echo WARNING: Extra arguments shall be discarded. >&2
    }
    echo $2
}

# is signal valid?
signal_valid()
{
    local valid_signal='\<(SIG)?(HUP|STOP|CONT|USR2)\>'
    [[ ! $1 =~ $valid_signal ]] && {
        echo Signal provided is not valid. Accepted signals '-> '\
             HUP STOP CONT and USR2. >&2
        return 2
    }
    return 0
}

# os detect error
os_detect_error()
{
    echo Could not divine the OS Type, sorry. >&2
    return 2
}

# Detect OS
box_os_detect()
{
    local release_str= match=0
    shopt -s nocasematch
    release_str=$( \
                   cat /etc/centos-release 2>/dev/null || \
                       cat /etc/issue.net 2>/dev/null \
	       )
    [[  -z $release_str ]] && os_detect_error
    for os in "${!detect_stings[@]}"; do
        [[ $release_str =~ ${detect_stings[$os]} ]] && \
            echo $(sed 's/\(.\)\(.*\)/\u\1\2/' <<< $os) && \
            (( match++ )) && break
    done
    [ $match -eq 0 ] && os_detect_error
    shopt -u nocasematch
}

# pkg check error
pkg_check_error()
{
    echo Package not installed. >&2
    return 2
}

# Is package installed
gw_pkg_check()
{
    local os=
    os=$(sed 's/\([[:alpha:]]\)\([[:alpha:]]*\)/\u\1\L\2/' <<< $1)
    [ $# -ne 2 ] && {
        echo Usage: $0 os pkg >&2
        return 2
    }
    eval ${os_chk[$os]} $2 > /dev/null 2>&1 && {
        echo Package found. >&2
        return
    }
    pkg_check_error
}

# pkg install error
pkg_install_error()
{
    echo Something went awry. >&2
    echo It happened while running $@ >&2
    return 2
}

# install package
gw_install_pkg()
{
    local os=
    [ $# -le 0 ] && {
        echo Usage: $0 os pkg >&2
        return 2
    }
    os=$1; shift
    inst_cmd="${os_installer[$os]} $*"
    eval $inst_cmd > /dev/null 2>&1 && {
        echo Package\(s\) $* installed successfully. >&2
        return
    }
    pkg_install_error $inst_cmd
}

gw_mk_stage()
{
    if test -d $INST; then
        return
    else
        mkdir -p $INST 2>/dev/null
        [ $? -eq 0 ] && return
        echo Install staging area could not be created, \
             permissions maybe? >&2
        return 2
    fi
}

gw_fetch_src()
{
    local fetch_cmd= src_dir=
    local archive_file=${GW_SRC_URL##*/}
    fetch_cmd="wget $GW_SRC_URL 
                    --no-check-certificate \
                    --output-document=${archive_file}
                    > /dev/null 2>&1"
    src_dir=$(sed 's/.tar.*//' <<< ${archive_file})
    # fetch_cmd='timeout 100 yes p | svn co
    #                   https://svn.kannel.org/gateway/trunk'
    eval $fetch_cmd > /dev/null 2>&1
    [ $? -eq 0 ] && {
        tar xzf \
            ${GW_SRC_URL##*/} \
	    --overwrite
        echo $(pwd)/$src_dir
        return
    } || {
        echo Something went wrong while fetching src. \
             Please check '->' $fetch_cmd >&2
        return 2
    }
}

gw_install_error()
{
    local box=Gateway
    [ $# -gt 0 ] && box="$1"
    echo Encountered an error installing $box. >&2
    return 2
}

gw_install()
{
    local src_dir=
    echo Expect lots of text to scroll by as gateway compiles. >&2
    echo ----------------------------------------------------- >&2
    gw_mk_stage || return
    pushd $INST
    # rm -rf $INST/*
    src_dir=$(gw_fetch_src)
    [ -z $src_dir ] && return 2
    pushd "$src_dir"
    sh bootstrap.sh
    eval sh configure $BBOX_INSTALL_OPTIONS
    [ $? -eq 0 ] && {
	[ -f .depend ] || touch .depend && make depend || :
    } && \
        { make && make install; } || gw_install_error
    [ $? -eq 0 ] && {
        echo Gateway Installed successfully >&2
	popd
        return
    }
    return 2
}

sqlbox_install()
{
    local src_dir= gw_dir=
    gw_dir=$(sed 's/.tar.*//' <<< ${GW_SRC_URL##*/})
    src_dir=$INST/$gw_dir/addons/sqlbox
    echo Expect some text to scroll by as sqlbox compiles. >&2
    echo ----------------------------------------------------- >&2
    gw_mk_stage || return
    cd $src_dir || {
        echo Cannot find source \[ $src_dir \]. Aborting. >&2
        return 2
    }
    sh bootstrap.sh
    eval sh configure $SQLBOX_INSTALL_OPTIONS
    [ $? -eq 0 ] && { make && make install; } || gw_install_error sqlbox
    [ $? -eq 0 ] && {
        echo Sqlbox Installed successfully >&2
        return
    }
    return 2
}

smppbox_install()
{
    local src_dir= gw_dir=
    gw_dir=$(sed 's/.tar.*//' <<< ${GW_SRC_URL##*/})
    src_dir=$INST/$gw_dir/addons/opensmppbox
    echo Expect some text to scroll by as smppbox compiles. >&2
    echo ----------------------------------------------------- >&2
    gw_mk_stage || return
    cd $src_dir || {
        echo Cannot find source \[ $src_dir \]. Aborting. >&2
        return 2
    }
    sh bootstrap.sh
    eval sh configure $SMPPBOX_INSTALL_OPTIONS
    [ $? -eq 0 ] && {
        make && make install
    } || gw_install_error opensmppbox
    [ $? -eq 0 ] && {
        echo Opensmppbox Installed successfully >&2
        return
    }
    return 2
}

check_pkgs()
{
    local os= save_ifs=
    save_ifs="$IFS"
    os=$(tr '[[:upper:]]' '[[:lower:]]' <<< $(box_os_detect))
    IFS='|'
    unset -v missing_pkgs
    for pkg in ${os_pkgs[$os]}; do
        echo
        echo Checking Pkg '->' $pkg >&2
        gw_pkg_check $os $pkg
        [ $? -ne 0 ] && {
            echo Oops! Package $pkg was not found. >&2
	    missing_pkgs+=( $pkg )
        }
    done
    echo Package check complete. >&2
    [[ ${#missing_pkgs[@]} -gt 0 ]] && {
	declare -p missing_pkgs
	echo ${#missing_pkgs[@]} packages found missing. >&2
	echo Performing repository Update >&2
	eval ${os_update[$os]} > /dev/null 2>&1
    }
    IFS="$save_ifs"
}

handle_pkgs()
{
    local os=
    os=$(box_os_detect)
    eval $(check_pkgs)
    for pkg in ${!missing_pkgs[@]}; do
        gw_install_pkg $os ${missing_pkgs[$pkg]}
    done
    [[ $os =~ Debian ]] && handle_debian_symlinks
    install_bison
}

handle_debian_symlinks()
{
    :
    # ln -s /usr/bin/pcre2-config /usr/bin/pcre-config
}

install_bison()
{
    wget https://ftp.gnu.org/gnu/bison/bison-2.7.tar.gz > /dev/null 2>&1
    tar zxf bison-2.7.tar.gz && cd bison-2.7 && ./configure && make \
        && make install && cd src 
    cp bison /usr/local/bin/bison && cp bison /usr/bin/bison 
    cd .. && cd .. && rm -rf bison-2.7.tar.gz bison-2.7
}

install_gw()
{
    check_user && check_gw_dir && check_log_path && check_run_path && \
    check_spool_dir && handle_pkgs && gw_install && sqlbox_install && \
    smppbox_install && launch_gw_config $CONF_TARBALL
    # Handle systemd and logrotate
    __copy_logrotate_config
    __copy_configs
    __copy_admin_scripts
    __copy_env_file
    for box in \
        bearerbox \
        smsbox \
        sqlbox \
        smppbox
    do
        __systemd_enable_box $box
    done
}

uninstall_gw()
{
    local prefix= dirs= box= gw_dir=
    gw_dir=$(sed 's/.tar.*//' <<< ${GW_SRC_URL##*/})
    prefix=$INST/$gw_dir
    dirs=(. addons/sqlbox addons/opensmppbox)
    for dir in ${dirs[@]}
    do
	[[ $dir = '.' ]] && box=gateway || \
		box=$(cut -d/ -f2 <<< $dir)
	[[ -d $prefix/$dir ]] && {
	    cd $prefix/$dir
	    make uninstall > /dev/null 2>&1 && \
		echo $box uninstalled. || \
		    echo $box not found.
	} || echo $box not found.
    done
    rm -rf $INST
    cd
}

prep_config_target()
{
    local conf_dir=
    conf_dir=$(dirname $GW_CONF)
    [ -d $conf_dir ] || mkdir -p $conf_dir
    echo $conf_dir
}

launch_gw_config()
{
    local conf_tarball= conf_dir=
    [[ $# -gt 0 ]] && [[ -f $1 ]] && conf_tarball=$1 || {
	    echo launch_gw_config requires an argument, the config tarball >&2
	    return 2
	}
    conf_dir=$(prep_config_target)
    tar xC $conf_dir -f $conf_tarball
    edit_config_dir $conf_dir
}

edit_config_dir()
{
    local conf_dir= search=
    { [[ $# -le 0 ]] || [[ ! -d $1 ]]; } && {
		echo edit_config_dir requires an argument, a valid config dir \
			 An optional 2nd argument can be supplied, this shall be \
			 used as the search word. >&2
		return 2
    } || {
		[[ -n $2 ]] &&  search=$2 || search=testing
		conf_dir=$1
    }
    grep \
	  -lri \
	  --exclude=.[^.]* \
	  $search \
	  $conf_dir |\
	  xargs \
	      sed -i "s:"\\"(/"\\")$search"\\"(/"\\"):"\\"1$GW_NAME"\\"2:g"
}

edit_logrotate_config()
{
    local search=testing config=/etc/logrotate.d/kannel
    sed -i "s:"\\"(/"\\")$search"\\"(/"\\"):"\\"1$GW_NAME"\\"2:g" \
        $config
}

get_store_type()
{
    local core= store_type=
    core=${GW_CONF%/*}/core.conf
    store_type=$(awk '/store-type/{print $NF}' $core)
    echo $store_type
}


get_dlr_storage()
{
    local core= dlr_store=
    core=${GW_CONF%/*}/core.conf
    dlr_store=$(awk '/dlr-storage/{print $NF}' $core)
    echo $dlr_store
}

disable_external_dlr_storage()
{
    local tmp_cfg=
    tmp_cfg=/tmp/kannel_tmp.conf
    sed -e \
	'/dlr-store/s/^[^i]*\(include.*\)/# \1/' \
	$GW_CONF > $tmp_cfg
    diff $GW_CONF $tmp_cfg > /dev/null 2>&1
    [ $? -ne 0 ] && cp -f $tmp_cfg $GW_CONF
    rm -f $tmp_cfg
}

enable_external_dlr_storage()
{
    local tmp_cfg= storage_type=
    tmp_cfg=/tmp/kannel_tmp.conf
    [ $# -gt 0 ] && storage_type=$1 || {
	    echo Please provide storage type to enable >&2
	    return 2
	}
    disable_external_dlr_storage
    sed -e \
	"/dlr-store/{/$storage_type/s/^[^i]"'*\(include.*\)/\1/}' \
	$GW_CONF > $tmp_cfg
    diff $GW_CONF $tmp_cfg > /dev/null 2>&1
    [ $? -ne 0 ] && cp -f $tmp_cfg $GW_CONF
    rm -f $tmp_cfg
}

chkp()
{
    read -r -d '' <<-"END" USAGE
		chkp host port
	END
    if [ $# -eq 1 ]
    then
        nc -z 127.0.0.1 $1 > /dev/null 2>&1
        return $?
    elif [ $# -eq 2 ]
    then
        nc -z $1 $2 > /dev/null 2>&1
        return $?
    else
        echo "$USAGE"
    fi
}

check_smppbox_port()
{
    local host= port= smsbox_conf_file=
    [ $# -ge 1 ] && smppbox_conf_file=${1} || {
        echo Please provide the config file. >&2
        return 3
    }
    port=$(awk -F' = ' '/^bearerbox-port/{print $NF}' \
               $smppbox_conf_file
        )
    host=$(awk -F' = ' '/^bearerbox-host/{print $NF}' \
               $smppbox_conf_file
        )
    chkp $host $port
}

check_smsbox_port()
{
    local host= port= smsbox_conf_file=
    smsbox_conf_file=${GW_CONF%/*}/smsboxes/smsbox.conf
    port=$(awk -F' = ' '/^bearerbox-port/{print $NF}' \
               $smsbox_conf_file
        )
    [ $# -gt 0 ] && host=$1 || host=$LHOST
    chkp $host $port
}

check_mysql_port()
{
    local host= port=
    if [ $# -eq 0 ]
    then
	host=$LHOST
	port=3306
    elif [ $# -eq 1 ]
    then
	host=$1
	port=3306
    elif [ $# -ge 2 ]
    then
	if [[ $2 =~ ^[[:digit:]]+$ ]]
	then
	    host=$1
	    port=$2
	else
	    echo Port port provided needs to be numeric >&2
	    return 2
	fi
    else
	echo check_mysql_port host \[ port \] >&2
	return 2
    fi
    chkp $host $port
}

test_mysql_credentials()
{
    eval mysqladmin status \
	 -u${db_credentials[username]} \
	 -p${db_credentials[password]} \
	 -h${db_credentials[host]} \
	 -P${db_credentials[port]} \
	 > /dev/null 2>&1
}

dlr_store_file_name()
{
    local store_type= file_name=
    [ $# -ne 1 ] && {
	echo Usage: dlr_store_file_name store_type >&2
	return 2
    } || {
	store_type=$1
    }
    file_name=$(sed -n \
		    "/D  *L  *R  *s/,/S *M *S/{/$store_type/{p;q}}" \
		    $GW_CONF |\
		    awk '{print $NF}'
	     )
    [ -z $file_name ] && {
	echo file not found >&2
	return 2
    } || {
	eval echo $file_name
    }
}

get_conn_file_name()
{
    local conf_file= conn_file=
    [ $# -ne 1 ] && {
	echo Usage: get_conn_file_name conf_file >&2
	return 2
    } || {
	conf_file=$1
    }
    conn_file=$(awk '/include/{print $NF}' $conf_file)
    [ -z $conn_file ] && {
	echo connection file not found >&2
	return 2
    } || {
	eval echo $conn_file
    }
}

get_credetials()
{
    local conn_file=
    [ $# -ne 1 ] && {
	echo Usage: get_credentials conn_file >&2
	return 2
    } || {
	conn_file=$1
    }
    grep -q 'group = mysql-connection' $conn_file
    if [ $? -eq 0 ]
    then
	for key in ${!db_credentials[@]}
	do
            db_credentials[$key]=$(awk -F' = ' \
                                       "/^$key/{print \$NF}" \
                                       $conn_file
                          )
	done
        [ $? -ne 0 ] && {
            echo DB Credentials NOT fetched. >&2
            return 2
        }
    else
	echo Conf file provided does not contain a mysql-connection \
	     group definition >&2
	return 2
    fi
    return
}

check_spool()
{
    local core= spool_dir= owner= spool_type= \
          help=
    help="Usage: ${FUNCNAME[0]} dlr|store"
    if [ $# -eq 1 ]
    then
        grep -Eq '^(dlr|store)' <<< "$1"
        if [ $? -eq 0 ]
        then
            spool_type=$1
        else
            echo $help >&2
            return 2
        fi
    else
        echo $help >&2
        return 2
    fi
    [[ $spool_type =~ ^dlr ]] && spool_type=dlr-spool || \
            spool_type=store-location
    core=${GW_CONF%/*}/core.conf
    spool_dir=$(eval awk -F\' = \' \
                     \"/^$spool_type/{print \\\$NF}\" \
                     $core  \| sed -e \'s/\"//g\' \
                     -e \"s/\'//g\"
             )
    [ -z $spool_dir ] && {
        echo $spool_type is not defined in the config group core.
        return 2
    }
    [ -d $spool_dir ] || {
        mkdir -p $spool_dir 2>/dev/null
        [ $? -ne 0 ] && {
            echo Need permissions to create ${spool_dir}. >&2
            return 5
        }
        eval chown $GW_USER $spool_dir 2>/dev/null
        [ $? -ne 0 ] && {
            echo Need permissions to change ${spool_dir}\'s owner. >&2
            return 5
        }
    }
    owner=$(eval stat -c \'%U\' $spool_dir)
    [ $owner = $GW_USER ] || {
        eval chown $GW_USER $spool_dir 2>/dev/null
        [ $? -ne 0 ] && {
            echo Need permissions to change ${spool_dir}\'s owner. >&2
            return 2
        }
    }
    return 0
}

# This baby checks the key it is passed
# as an argument and uses it to find an
# sqlbox configuration file that fuzzy
# matches the key on either the smsbox-id
# or the file name. Without an argument
# the key is main.

get_smsbox_conf()
{
    local number_of_configs= key= rexp= \
          base=
    help="Usage: ${FUNCNAME[0]} [key]"
    case $# in
        0)
            key=main
            base=smsbox
            ;;
        1)
            key=$1
            base=smsbox
            ;;
        2)
            key=$1
            base=$2
            ;;
        *)
            echo $help >&2
            return 2
            ;;
    esac
    number_of_configs=$(ls -1 \
                           ${GW_CONF%/*}/smsboxes/*conf |\
                            wc -l
                     )
    if [ $number_of_configs -eq 1 ]
    then
        echo ${GW_CONF%/*}/smsboxes/*conf
        return
    elif [ $key = 'main' ]
    then
        rexp='^smsbox-id[^[:alnum:]]+('$base')?_?.*(01|main|)?.*$'
        grep -El \
             $rexp \
             ${GW_CONF%/*}/smsboxes/*conf |\
            head -1
        [ $? -eq 0 ] && return || {
                echo No Config file was found. Perhaps \
                     you are not using $base as the root \
                     of the smsbox-id\'s name. >&2
                return 2
            }
    else
        rexp='^smsbox-id[^[:alnum:]]+('$base')?_?.*('$key').*$'
        grep -El \
             $rexp \
             ${GW_CONF%/*}/smsboxes/*conf |\
            head -1
        [ $? -eq 0 ] && return || {
                echo No Config file was found. Perhaps \
                     you are not using $base as the root \
                     of the smsbox-id\'s name. >&2
                return 2
            }
    fi
}

get_sqlbox_conf()
{
    local number_of_configs= key= rexp= \
          base=
    help="Usage: ${FUNCNAME[0]} [key]"
    case $# in
        0)
            key=main
            base=sqlbox
            ;;
        1)
            key=$1
            base=sqlbox
            ;;
        2)
            key=$1
            base=$2
            ;;
        *)
            echo $help >&2
            return 2
            ;;
    esac
    number_of_configs=$(ls -1 \
                           ${GW_CONF%/*}/sqlboxes/*conf |\
                            wc -l
                     )
    if [ $number_of_configs -eq 1 ]
    then
        echo ${GW_CONF%/*}/sqlboxes/*conf
        return
    elif [ $key = 'main' ]
    then
        rexp='^smsbox-id.*\<'$base'_?(01|main|)$'
        grep -El \
             $rexp \
             ${GW_CONF%/*}/sqlboxes/*conf |\
            head -1
        [ $? -eq 0 ] && return || {
                echo No Config file was found. Perhaps \
                     you are not using $base as the root \
                     of the smsbox-id\'s name. >&2
                return 2
            }
    else
        rexp='^smsbox-id.*('$base')?_?('$key').*$'
        grep -El \
             $rexp \
             ${GW_CONF%/*}/sqlboxes/*conf |\
            head -1
        [ $? -eq 0 ] && return || {
                echo No Config file was found. Perhaps \
                     you are not using $base as the root \
                     of the smsbox-id\'s name. >&2
                return 2
            }
    fi
}

check_mysql()
{
    local conn_file= conf_file= help=
    help="Usage: ${FUNCNAME[0]} dlrstore | sqlbox conf_path"
    { [ $# -eq 0 -o $# -gt 2 ] || [[ ! $1 =~ dlrstore|sqlbox ]]; } && {
        echo $help >&2
        return 2
    }
    [[ $1 =~ ^sqlbox$ ]] && {
        [[ $# -eq 2 ]] || {
            echo $help >&2
            return 2
        }
    }
    if [ $1 = 'dlrstore' ]
    then
        conf_file=$(dlr_store_file_name mysql)
        conn_file=$(get_conn_file_name $conf_file)
    else
        conf_file=$2
        [ -r $conf_file ] || {
            echo config file provided is not readable. >&2
            return 2
        }
        conn_file=$(get_conn_file_name $conf_file)
    fi
    get_credetials $conn_file
    check_mysql_port \
        ${db_credentials[host]} \
        ${db_credentials[port]}
    [ $? -ne 0 ] && {
        print_error "Mysql is not available on "\
                    ${db_credentials[host]}":"\
                    ${db_credentials[port]}
        return
    }
    test_mysql_credentials
    [ $? -ne 0 ] && {
        print_error "Mysql Credentials are invalid."
        return
    }
    return 0
}

check_included_paths()
{
    local ret=0 conf_file=
    unset -v paths; declare -a paths
    if [ $# -ne 1 ]
    then
        echo "Usage: ${FUNCNAME[0]} config_file" >&2
        return 2
    else
        conf_file=$1
    fi
    while read path
    do
        paths+=( $path )
    done < <(awk -F' = ' \
                 '/^include/{gsub(/"/,"",$NF);print $NF}' \
             $conf_file
            )
    if [ ${#paths[@]} -gt 0 ]
    then
        for path in ${paths[@]}
        do
            [ -r $path ] || {
                echo Cannot read \"$path\", confirm if it is there. >&2
                ret=2
                break
            }
        done
    else
        echo I did not find a single path in \"$conf_file\" >&2
        ret=2
    fi
    # DEBUG
    # [ $ret -eq 0 ] && \
    #     echo All paths checks out, ergo all systems go. >&2
    return $ret
}

check_user()
{
    grep -q $GW_USER /etc/passwd
    [ $? -eq 0 ] || {
        useradd -r $GW_USER 2>/dev/null
        [ $? -eq 0 ] || {
            echo Need permissions to add a user. >&2
            return 5
        }
    }
}

check_gw_dir()
{
    [ -d $GW_DIR ] || {
        mkdir -p $GW_DIR
    }
}

check_log_path()
{
    [ -d $LOGDIR ] || {
        mkdir -p $LOGDIR/{smscs,access,sqlbox,smppbox}
        chown $GW_USER $LOGDIR{smscs,access,sqlbox,smppbox} \
            2>/dev/null
        [ $? -eq 0 ] || {
            echo Need permissions to change ${LOGDIR}\'s owner. >&2
            return 5
        }
    }
}

check_run_path()
{
    [ -d $RUNDIR ] || {
        mkdir -p $RUNDIR
        chown $GW_USER $RUNDIR 2>/dev/null
        [ $? -eq 0 ] || {
            echo Need permissions to change ${RUNDIR}\'s owner. >&2
            return 5
        }
    }
}

check_spool_dir()
{
    [ -d $GW_SPOOL_DIR ] || {
        mkdir -p $GW_SPOOL_DIR
        chown $GW_USER $GW_SPOOL_DIR 2>/dev/null
        [ $? -eq 0 ] || {
            echo Need permissions to change ${GW_SPOOL_DIR}\'s owner. >&2
            return 5
        }
    }
}

print_error()
{
    local code=2 msg=
    [ $# -lt 1 ] && {
        printf "print_error error_msg\n" >&2
        return 2
    }
    msg="$@"
    printf "%s" "$msg" >&2
    echo
    return $code
}

__disinfect_bashrc()
{
    local bashrc=/root/.bashrc blank=
    blank=$(($(sed -n '/= Gate[^=]*==*/=' $bashrc) - 1))
    sed -i \
        -e ${blank}d \
        -e '/= Gate[^=]*==*/,/^# ===* *$/d' \
        $bashrc
    unset -v gateway_name GW_NAME
}

__infect_bashrc()
{
    local bashrc_snippet=$SNIPPETS/bashrc.snip
    local bashrc=/root/.bashrc gw_name=$gateway_name
    grep -q '= Gate[^=]*==*' $bashrc
    [ $? -eq 0 ] && __disinfect_bashrc
    diff \
        gw_admin/snippets/bashrc.snip \
        <(
            sed -n '/= Gateway Stuff =/,/===*/p' $bashrc | \
            sed 's/^\(gate[^=]*.\).*/\1/'
         ) \
        > /dev/null 2>&1
    [ $? -ne 0 ] && \
        cat <(echo; cat $bashrc_snippet) >> $bashrc
    sed -i '/= Gateway Stuff =/,/^export gateway/{
               /^export/s/^\([^=]*.\).*/\1'$gw_name'/
            }' $bashrc
    # source $bashrc
}

# It seems like a better idea to use rsync instead of cp.
# I suspect rsync is a bit more portable too.
__copy_configs()
{
    local src_dir=$gw_admin_root/conf
    local target_dir=/usr/local/scripts/conf
    [ -d $target_dir ] || \
        mkdir -p $target_dir
    yes | cp -ru $src_dir/* $target_dir > /dev/null 2>&1
}

__copy_logrotate_config()
{
    local src_dir=$gw_admin_root/logrotate
    local target_dir=/etc/logrotate.d
    [ -d $target_dir ] || \
        mkdir -p $target_dir
    yes | cp -ru $src_dir/kannel $target_dir > /dev/null 2>&1
    edit_logrotate_config
}

__copy_admin_scripts()
{
    local src_dir=$gw_admin_root/admin
    [ -d $TARGET_SCRIPT_DIR ] || \
        mkdir -p $TARGET_SCRIPT_DIR
    yes | cp -ru $src_dir/{start,stop,reload,watchers} $TARGET_SCRIPT_DIR > /dev/null 2>&1
}

__copy_env_file()
{
    local src_dir=$gw_admin_root/systemd/env
    [ -d $SYSTEMD_ENV_DIR ] || \
        mkdir -p $SYSTEMD_ENV_DIR
    yes | cp -ru $src_dir/kannel $SYSTEMD_ENV_DIR > /dev/null 2>&1
    sed -i -e '/^gateway_name/s/^\([^=]*.\).*/\1'$GW_NAME'/' \
        $SYSTEMD_ENV_DIR/kannel
}

__update_systemd_unit_files()
{
    local src_dir=$gw_admin_root/systemd
    [ -d $SYSTEMD_UNIT_DIR ] || \
        mkdir -p $SYSTEMD_UNIT_DIR
    yes | cp -ru $src_dir/*.service $SYSTEMD_UNIT_DIR > /dev/null 2>&1
}

__systemd_enable_box()
{
    [[ $# -eq 1 && ${1} =~ ${box_regexes[avail_boxes]} ]] || {
        echo "Usage: ${FUNCNAME[0]} valid_box_name" >&2
        return 2
    }
    which systemctl >& /dev/null
    [ $? -ne 0 ] && {
        echo It seems you are running on a different init \
             system from systemd. Tough luck. >&2
        return 2
    }
    systemctl is-enabled ${1} >& /dev/null
    [ $? -eq 0 ] && \
        systemctl disable ${1} >& /dev/null
    __update_systemd_unit_files
    systemctl enable ${1} >& /dev/null
    [ $? -eq 0 ] || {
        echo Something seems to have gone awry. >&2
        return 2
    }
}

__remove_pid_file()
{
    local pidfile=
    [ $# -eq 1 ] && pidfile=$RUNDIR/${1}.pid || {
        echo "Usage: ${FUNCNAME[0]} pid_basename" >&2
        return 2
    }
    [ -f $pidfile ] && rm -f $pidfile || {
        echo PID file \"$pidfile\" not found. Nothing to do >&2
        return 0
    }
    [ $? -ne 0 ] && {
        echo Removal of PID file \"$pidfile\" failed. >&2
        return 2
    } || return 0
}
